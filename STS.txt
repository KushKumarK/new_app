// Activity Selection Problem
import java.io.*;
import java.lang.*;
import java.util.*;
class ActivitySelection {
 public static void printMaxActivities(int s[], int f[],int n) {
  int i, j;
  System.out.println(
            "Following activities are selected");
  i = 0;
  System.out.print(i + " ");
  for (j = 1; j < n; j++) {
  if (s[j] >= f[i]) {

	System.out.print(j + " ");
 i = j;
   }}
 }
  public static void main(String[] args)
 {
 int s[] = { 1, 3, 0, 5, 8, 5 };
 int f[] = { 2, 4, 6, 7, 9, 9 };
 int n = s.length;
  printMaxActivities(s, f, n);
 }
}

//Combinations
import java.io.*;
public class EthCode {
 static void combinationUtil(int arr[], int data[], int start,int end, int index, int r)
 {
  if (index == r)
  {
   for (int j=0; j<r; j++)
   System.out.print(data[j]+" ");
   System.out.println("");
   return;
  }

for (int i=start; i<=end && end-i+1 >= r-index; i++)
  {
   data[index] = arr[i];
  combinationUtil(arr, data, i+1, end, index+1, r);
  }
 }	static void printCombination(int arr[], int n, int r)
 {
 combinationUtil(arr, data, 0, n-1, 0, r);
 }

 public static void main (String[] args) {
  int arr[] = {1, 2, 3, 4, 5};
  int r = 3;
  int n = arr.length;
  printCombination(arr, n, r);
 }
}

//Graph Coloring

import java.io.*;
import java.util.*;
import java.util.LinkedList;

class Graph
{
 private int V; // No. of vertices
 private LinkedList<Integer> adj[];
      Graph(int v)
 {
  V = v;
  adj = new LinkedList[v];
  for (int i=0; i<v; ++i)
   adj[i] = new LinkedList();
 }
 void addEdge(int v,int w)
 {
  adj[v].add(w);
  adj[w].add(v); //Graph is undirected
 }

void greedyColoring()
 {
  int result[] = new int[V];
  Arrays.fill(result, -1);
           result[0] = 0;
  boolean available[] = new boolean[V];
  Arrays.fill(available, true);
  for (int u = 1; u < V; u++)
  {
Iterator<Integer> it = adj[u].iterator() ;
   while (it.hasNext())
   {
    int i = it.next();
    if (result[i] != -1)
   available[result[i]] = false;
   }

    int cr;
   for (cr = 0; cr < V; cr++){
    if (available[cr])
     break;
   }

 result[u] = cr;
 Arrays.fill(available, true);
  }
  for (int u = 0; u < V; u++)
System.out.println("Vertex " + u + " ---> Color "
      +result[u]);
 }
	public static void main(String args[])
 {
  Graph g1 = new Graph(5);
  g1.addEdge(0, 1);
  g1.addEdge(0, 2);
  g1.addEdge(1, 2);
  g1.addEdge(1, 3);
  g1.addEdge(2, 3);
  g1.addEdge(3, 4);
 System.out.println("Coloring of graph 1");
  g1.greedyColoring();

  System.out.println();
  Graph g2 = new Graph(5);
  g2.addEdge(0, 1);
  g2.addEdge(0, 2);
  g2.addEdge(1, 2);
  g2.addEdge(1, 4);
  g2.addEdge(2, 4);
  g2.addEdge(4, 3);
System.out.println("Coloring of graph 2 ");
  g2.greedyColoring();
 }}


 // Hamiltonian Cycle

 import java.util.Scanner;
import java.util.Arrays;
public class EthCode
{
    private int V, pathCount;
    private int[] path;
    private int[][] graph;
    public void findHamiltonianCycle(int[][] g)
    {
        V = g.length;
        path = new int[V];
        Arrays.fill(path, -1);
        graph = g;
        try
        {
            path[0] = 0;
            pathCount = 1;
            solve(0);
            System.out.println("No solution");
        }

catch (Exception e)
        {
            System.out.println(e.getMessage());
            display();
        }
    }

public void solve(int vertex) throws Exception
    {
    if (graph[vertex][0] == 1 && pathCount == V)           throw new Exception("Solution found");
        if (pathCount == V)
            return;

for (int v = 0; v < V; v++)
        {
            if (graph[vertex][v] == 1 )
            {
                path[pathCount++] = v;
                graph[vertex][v] = 0;
                graph[v][vertex] = 0;
                if (!isPresent(v))
                    solve(v);
                graph[vertex][v] = 1;
                graph[v][vertex] = 1;
                path[--pathCount] = -1;
            }}}
    public boolean isPresent(int v)
    {
        for (int i = 0; i < pathCount - 1; i++)
            if (path[i] == v)
                return true;
        return false;
    }
	public void display()
    {
        System.out.print("\nPath : ");
        for (int i = 0; i <= V; i++)
            System.out.print(path[i % V] +" ");
        System.out.println();
    }
public static void main (String[] args)
    {
        Scanner scan = new Scanner(System.in);
        HamiltonianCycle hc = new HamiltonianCycle();
        int V = scan.nextInt();
        int[][] graph = new int[V][V];
        for (int i = 0; i < V; i++)
            for (int j = 0; j < V; j++)
                graph[i][j] = scan.nextInt();
    hc.findHamiltonianCycle(graph);
    }
}


// Josephus Problem
import java.io.*;

class EthCOde {

 static int josephus(int n, int k)
 {
  if (n == 1)
   return 1;
  else
   /* The position returned by josephus(n - 1, k) is adjusted because the recursive call josephus(n - 1, k) considers the original position k%n + 1 as position 1 */
   return (josephus(n - 1, k) + k - 1) % n + 1;
 }

 public static void main(String[] args)
 {
  int n = 14;
  int k = 2;
  System.out.println(josephus(n, k));
 }
}

// Kruskal Algorithm
import java.util.*;

public class DisjointSet {
  static class Edge {
    int source;
    int destination;

    public Edge(int source, int destination) {
      this.source = source;
      this.destination = destination;
    }
  }
static class Graph {
    int vertices;
    LinkedList < Edge > [] adjList;
   ArrayList < Edge > allEdges = new ArrayList < > ();

    Graph(int vertices) {
      this.vertices = vertices;
      adjList = new LinkedList[vertices];
      for (int i = 0; i < vertices; i++) {
        adjList[i] = new LinkedList < > ();
      }}	public void addEgde(int source, int destination) {
      Edge edge = new Edge(source, destination);
      adjList[source].addFirst(edge);
      allEdges.add(edge);
    }

    public void makeSet(int[] parent) {
      for (int i = 0; i < vertices; i++) {
        parent[i] = i;
      }
    }

    public int find(int[] parent, int vertex) {
      if (parent[vertex] != vertex)
        return find(parent, parent[vertex]);;
      return vertex;
    }

// Manacher's Algorithm
/// Longest Palindromic Substring - Brute Force
import java.util.*;

class EthCode{
static void printSubStr(String str, int low, int high)
{
 for (int i = low; i <= high; ++i)
 System.out.print(str.charAt(i));
}
static int longestPalSubstr(String str)
{
 // get length of input String
 int n = str.length();
 // All subStrings of length 1
 // are palindromes
 int maxLength = 1, start = 0;
 // Nested loop to mark start and end index
 for (int i = 0; i < str.length(); i++) {
 for (int j = i; j < str.length(); j++) {
 int flag = 1;	 // Check palindrome
 for (int k = 0; k < (j - i + 1) / 2; k++)
 if (str.charAt(i + k) != str.charAt(j - k))
 flag = 0;
 // Palindrome
 if (flag!=0 && (j - i + 1) > maxLength) {
 start = i;
 maxLength = j - i + 1;
 } } }
 System.out.print("Longest palindrome subString is: ");
 printSubStr(str, start, start + maxLength - 1);
 // return length of LPS
 return maxLength;
}
// Driver Code
public static void main(String[] args)
{
 String str = "helloworld";
 System.out.print(longestPalSubstr(str));
}
}
// Longest Palindromic Substring - Better Solution
public class EthCode {
 // A utility function to print
 // a substring str[low..high]
 static void printSubStr(String str,
 int low, int high)
 {
 System.out.println(
 str.substring(
 low, high + 1));
 }
 static int longestPalSubstr(String str)
 {
 // The result (length of LPS)
 int maxLength = 1;
 int start = 0;
 int len = str.length();
 int low, high;
	 // One by one consider every
 // character as center
 // point of even and length
 // palindromes
 for (int i = 1; i < len; ++i) {
 // Find the longest even
 // length palindrome with
 // center points as i-1 and i.
 low = i - 1;
 high = i;
 while (low >= 0 && high < len
 && str.charAt(low)
 == str.charAt(high)) {
 --low;
 ++high;
 }
 // Move back to the last possible valid palindrom substring
 // as that will anyway be the longest from above loop
 ++low; --high;
 if (str.charAt(low) == str.charAt(high) && high - low + 1 > maxLength) {
 start = low;
 maxLength = high - low + 1;
 }
 // Find the longest odd length
 // palindrome with center point as i
 low = i - 1;
 high = i + 1;
 while (low >= 0 && high < len
 && str.charAt(low)
 == str.charAt(high)) {
 --low;
 ++high;
 }	 // Move back to the last possible valid palindrom substring
 // as that will anyway be the longest from above loop
 ++low; --high;
 if (str.charAt(low) == str.charAt(high) && high - low + 1 > maxLength) {
 start = low;
 maxLength = high - low + 1;
 }
 // Find the longest odd length
 // palindrome with center point as i
 low = i - 1;
 high = i + 1;
 while (low >= 0 && high < len
 && str.charAt(low)
 == str.charAt(high)) {
 --low;
 ++high; }
 // Move back to the last possible valid palindrom substring
 // as that will anyway be the longest from above loop
 ++low; --high;
 if (str.charAt(low) == str.charAt(high) && high - low + 1 > maxLength) {
 start = low;
 maxLength = high - low + 1;
 } }
 printSubStr(str, start, start + maxLength - 1);
 return maxLength;
 }
 public static void main(String[] args)
 {
 String str = "helloworld";
 System.out.println(longestPalSubstr(str));
 } }

 // Maneuvering Problem
 public class EthCode {
 // Returns count of possible paths to reach
 // cell at row number m and column number n
 // from the topmost leftmost cell (cell at 1, 1)
 static int numberOfPaths(int m, int n)
 {
  // If either given row number is first or
  // given column number is first
  if (m == 1 || n == 1)
   return 1;

  // If diagonal movements are allowed then
  // the last addition is required.
  return numberOfPaths(m - 1, n) + numberOfPaths(m, n - 1);
  // + numberOfPaths(m-1, n-1);
 }
	 public static void main(String args[])
 {
  System.out.println(numberOfPaths(3, 3));
 }
}

// Maze Solving
public class RatMaze{
 static int N;
 void printSolution(int sol[][])
 {
  for (int i = 0; i < N; i++) {
   for (int j = 0; j < N; j++)
    System.out.print(
     " " + sol[i][j] + " ");
   System.out.println();
  }
 }
 boolean isSafe(int maze[][], int x, int y)
 {
  return (x >= 0 && x < N && y >= 0
    && y < N && maze[x][y] == 1);
 }
boolean solveMaze(int maze[][])
 {
  int sol[][] = new int[N][N];
if (solveMazeUtil(maze, 0, 0, sol) == false) {
 System.out.print("Solution doesn't exist");
   return false;
  }

  printSolution(sol);
  return true;
 }
if(isSafe(maze, x, y) == true) {
   if (sol[x][y] == 1)
    return false;
   sol[x][y] = 1;
 if (solveMazeUtil(maze, x + 1, y, sol))
    return true;
 if (solveMazeUtil(maze, x, y + 1, sol))
    return true;
 if (solveMazeUtil(maze, x - 1, y, sol))
    return true;
 if (solveMazeUtil(maze, x, y - 1, sol))
    return true;
   sol[x][y] = 0;
   return false;
  }

  return false;}
public static void main(String args[])
 {
  RatMaze m = new RatMaze();
  int maze[][] = { { 1, 0, 0, 0 },
     { 1, 1, 0, 1 },
     { 0, 1, 0, 0 },
     { 1, 1, 1, 1 } };
m.solveMaze(maze);
 }}

// MOVE HYPHEN TO THE BEGINNING
class EthCode
{
 static void moveSpaceInFront(char str[])
 {
 // Traverse from end and swap hyphens
 int i = str.length-1;
 for (int j = i; j >= 0; j--)
 if (str[j] != '-')
 {
 char c = str[i];
 str[i] = str[j];
 str[j] = c;
 i--;
 }
 }	 public static void main(String[] args)
 {
 char str[] = "Code- 4 -lyf".toCharArray();
 moveSpaceInFront(str);
 System.out.println(String.valueOf(str));
 }
}

// N QUEENS

import java.util.Scanner;
public class NQueens
{
 public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        char board[][]=new char[n][n];
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                board[i][j]='-';
        if(solveNQueens(board,0,n))              solution(board,n);
        else
 System.out.println("No solution exists");
    }
public static void solution(char board[][], int n)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
           System.out.print(" "+board[i][j]+" ");
           System.out.println();
        }}	public static boolean isSafe(char board[][], int row, int column, int n)
    {
        int i,j;
    for(i=0;i<column;i++)
        {
        if(board[row][i]=='Q')
             return false;
        }
   for(i=row,j=column; i>=0 && j>=0;i--,j--)
        {
          if(board[i][j]=='Q')
              return false;

   for(i=row,j=column; i<n && j>=0;i++,j--)
        {
          if(board[i][j]=='Q')
             return false;
        }
        return true;
    }
 public static boolean solveNQueens(char board[][], int column, int n)
    {
        if(column>=n)
           return true;
        for(int i=0;i<n;i++)
        {
            if(isSafe(board,i,column,n))
            {
                board[i][column]='Q';
             if(solveNQueens(board, column+1,n))
                return true;
                board[i][column]='-';
            }
        }
        return false;
    }
}

// N-QUEENS(Alternate)

import java.util.*;
class EthCode {
  static int N = 4;
  static int[] ld = new int[30];
  static int[] rd = new int[30];
  static int[] cl = new int[30];
  static void printSolution(int board[][]) {
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++)
        System.out.printf(" %d ", board[i][j]);
      System.out.printf("\n");
    }
  }
static boolean solveNQUtil(int board[][], int col) {
    if (col >= N)
      return true;
    for (int i = 0; i < N; i++) {
      if ((ld[i - col + N - 1] != 1 &&
          rd[i + col] != 1) && cl[i] != 1) {
        board[i][col] = 1;
        ld[i - col + N - 1] =
          rd[i + col] = cl[i] = 1;



	  if (solveNQUtil(board, col + 1))
          return true;
        board[i][col] = 0; // BACKTRACK
        ld[i - col + N - 1] =
          rd[i + col] = cl[i] = 0;
      }
    }
    return false;
  }
  static boolean solveNQ() {
    int board[][] ={{ 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 },
                    { 0, 0, 0, 0 }};
if (solveNQUtil(board, 0) == false) {
      System.out.printf("Solution does not exist");
      return false;
    }
printSolution(board);
    return true;
  }
public static void main(String[] args) {
    solveNQ();
  }}

// NATURAL SORT ORDER
import java.util.*;
public class NaturalOrderComparator implements Comparator
{
    int compareRight(String a, String b)
    {
        int bias = 0, ia = 0, ib = 0;
        for (;; ia++, ib++)
        {
            char ca = charAt(a, ia);
            char cb = charAt(b, ib);

            if (!isDigit(ca) && !isDigit(cb)) {
                return bias;
            }
            if (!isDigit(ca)) {
                return -1;
            }
            if (!isDigit(cb)) {
                return +1;
            }
            if (ca == 0 && cb == 0) {
                return bias;
  }      	if (bias == 0) {
                if (ca < cb) {
                    bias = -1;
                } else if (ca > cb) {
                    bias = +1;
                } }}}
public int compare(Object o1, Object o2)
    {
        String a = o1.toString();
        String b = o2.toString();

        int ia = 0, ib = 0;
        int nza = 0, nzb = 0;
        char ca, cb;

        while (true) {
            // Only count the number of zeroes leading the last number compared
            nza = nzb = 0;

            ca = charAt(a, ia);
            cb = charAt(b, ib);


     while (Character.isSpaceChar(ca) || ca == '0') {
                if (ca == '0') {
                    nza++;
                } else {
                    nza = 0;
                }

                ca = charAt(a, ++ia);
            }
while (Character.isSpaceChar(cb) || cb == '0') {
                if (cb == '0') {
                    nzb++;
                } else {
                    nzb = 0;
                }

                cb = charAt(b, ++ib);
            }
     	if (Character.isDigit(ca) && Character.isDigit(cb)) {
        int bias = compareRight(a.substring(ia), b.substring(ib));
                if (bias != 0) {
                    return bias;
                }
            }
if (ca == 0 && cb == 0) {
     return compareEqual(a, b, nza, nzb);
            }
            if (ca < cb) {
                return -1;
            }
            if (ca > cb) {
                return +1;
            }

            ++ia;
            ++ib;
} }

static boolean isDigit(char c) {
  return Character.isDigit(c) || c == '.' || c == ',';
    }

    static char charAt(String s, int i) {
        return i >= s.length() ? 0 : s.charAt(i);
    }

    static int compareEqual(String a, String b, int nza, int nzb) {
        if (nza - nzb != 0)
            return nza - nzb;

        if (a.length() == b.length())
            return a.compareTo(b);

        return a.length() - b.length();
    }
	public static void main(String[] args)
    {
 String[] strings = new String[] { "1-2", "1-02", "1-20", "10-20", "fred", "jane", "pic01","pic2", "pic02", "pic02a", "pic3", "pic4", "pic 4 else", "pic 5", "pic05", "pic 5","pic 5 something", "pic 6", "pic   7", "pic100", "pic100a", "pic120", "pic121",
"pic02000", "tom", "x2-g8", "x2-y7", "x2-y08", "x8-y8" };
   List orig = Arrays.asList(strings);
   System.out.println("Original: " + orig);
   List list = Arrays.asList(strings);
Collections.sort(list, new NaturalOrderComparator());

    System.out.println("Sorted: " + list);
}}



// SELECTION SORT
class EthCode
{
void sort(int arr[])
{
int n = arr.length;
for (int i = 0; i < n-1; i++)
{
int min_idx = i;
for (int j = i+1; j < n; j++)
if (arr[j] < arr[min_idx])
min_idx = j;
int temp = arr[min_idx];
arr[min_idx] = arr[i];
arr[i] = temp;
}}
	void printArray(int arr[])
{
int n = arr.length;
for (int i=0; i<n; ++i)
System.out.print(arr[i]+" ");
System.out.println();
}
public static void main(String args[])
{
SelectionSort ob = new SelectionSort();
int arr[] = {64,25,12,22,11};
ob.sort(arr);
System.out.println("Sorted array");
ob.printArray(arr);
}}

// QUICK SORT
class EthCode{
int partition(int arr[], int low, int high)
 {
 int pivot = arr[high];
 int i = (low-1);
 for (int j=low; j<high; j++)
 {
 if (arr[j] <= pivot)
 {
 i++;
 int temp = arr[i];
 arr[i] = arr[j];
 arr[j] = temp;
 }
 }
 int temp = arr[i+1];
 arr[i+1] = arr[high];
 arr[high] = temp;
 return i+1;
 }	void sort(int arr[], int low, int high){
 if (low < high)
 {
  int pi = partition(arr, low, high);
  sort(arr, low, pi-1);
  sort(arr, pi+1, high);
 }}
static void printArray(int arr[])
 {
 int n = arr.length;
 for (int i=0; i<n; ++i)
 System.out.print(arr[i]+" ");
 System.out.println();
 }
public static void main(String args[])
 {
 int arr[] = {10, 7, 8, 9, 1, 5};
 int n = arr.length;
  QuickSort ob = new QuickSort();
 ob.sort(arr, 0, n-1);
 System.out.println("sorted array");
 printArray(arr);
 }}

// SORTED UNIQUE PERMUTATION
import java.io.*;
import java.util.*;

public class EthCOde {
// Calculating factorial of a number
static int factorial(int n) {
 int f = 1;
 for (int i = 1; i <= n; i++)
 f = f * i;
 return f;
}
// Method to print the array
static void print(char[] temp) {
 for (int i = 0; i < temp.length; i++)
 System.out.print(temp[i]);
 System.out.println();
}
// Method to find total number of permutations	static int calculateTotal(char[] temp, int n) {
 int f = factorial(n);
 // Building HashMap to store frequencies of
 // all characters.
 HashMap<Character, Integer> hm =
     new HashMap<Character, Integer>();
 for (int i = 0; i < temp.length; i++) {
 if (hm.containsKey(temp[i]))
  hm.put(temp[i], hm.get(temp[i]) + 1);
 else
  hm.put(temp[i], 1);
 }
 // Traversing hashmap and finding duplicate elements.
 for (Map.Entry e : hm.entrySet()) {
 Integer x = (Integer)e.getValue();
 if (x > 1) {
  int temp5 = factorial(x);
  f = f / temp5;
 }
 }
 return f;
}
static void nextPermutation(char[] temp) {
 // Start traversing from the end and
 // find position 'i-1' of the first character
 // which is greater than its successor.
 int i;
 for (i = temp.length - 1; i > 0; i--)
 if (temp[i] > temp[i - 1])
  break;
 // Finding smallest character after 'i-1' and
 // greater than temp[i-1]	 int min = i;
 int j, x = temp[i - 1];
 for (j = i + 1; j < temp.length; j++)
 if ((temp[j] < temp[min]) && (temp[j] > x))
  min = j;
 // Swapping the above found characters.
 char temp_to_swap;
 temp_to_swap = temp[i - 1];
 temp[i - 1] = temp[min];
 temp[min] = temp_to_swap;
 // Sort all digits from position next to 'i-1'
 // to end of the string.
 Arrays.sort(temp, i, temp.length);
 // Print the String
 print(temp);
}
static void printAllPermutations(String s) {
 // Sorting String
 char temp[] = s.toCharArray();
 Arrays.sort(temp);
 // Print first permutation
 print(temp);
 // Finding the total permutations
 int total = calculateTotal(temp, temp.length);
 for (int i = 1; i < total; i++)
 nextPermutation(temp);
}	public static void main(String[] args) {
  //Input your string
 String s = "AAB";
 printAllPermutations(s);
}
}

// WEIGHTED SUBSTRING
import java.util.*;

class EthCode {
 static int distinctSubString(String P, String Q, int K, int N) {
 // Hashmap to store all subStrings
 HashSet < String > S = new HashSet < String > ();
 // Iterate over all subStrings
 for (int i = 0; i < N; ++i) {
 // Maintain the sum of all characters
 // encountered so far
 int sum = 0;
 // Maintain the subString till the
 // current position
 String s = "";
 for (int j = i; j < N; ++j) {
 // Get the position of the
 // character in String Q
 int pos = P.charAt(j) - 'a';	 // Add weight to current sum
 sum += Q.charAt(pos) - '0';
 // Add current character to subString
 s += P.charAt(j);
 // If sum of characters is <=K then insert in into the set
 if (sum <= K) {
 S.add(s);
 } else {
 break;
 }
 }
 }
 // required value
 return S.size();
 }
 public static void main(String[] args) {
 //Sample Input
 String P = "abcde";
 String Q = "12345678912345678912345678";
 int K = 5;
 int N = P.length();
 System.out.print(distinctSubString(P, Q, K, N));
 }
}
// WEIGHTED SUBSTRING(ALTERNATE)
import java.util.*;
class EthCode {
 static int distinctSubString(String str, int K, int N) {
 // Hashmap to store all subStrings
 HashSet < String > S = new HashSet < String > ();
 // Iterate over all subStrings
 for (int i = 0; i < N; ++i) {
 // Maintain the sum of all characters
 // encountered so far
 int sum = 0;
 // Maintain the subString till the
 // current position
 String s = "";
 for (int j = i; j < N; ++j) {
 char ch = str[j];
 //Get the current weight
	 int currWeight = ch - 'a'
 int pos = P.charAt(j) - 'a';
 // Add weight to current sum
 sum += currweight;
 // Add current character to subString
 s += P.charAt(j);
 // If sum of characters is ==K then insert in into the set
 if (sum == K) {
 S.add(s);
 } else {
 break;
 }
 }
 }
 // required value
 return S.size();
 }
 public static void main(String[] args) {
 //Sample Input
 String str = "abcde";

 int K = 5;

 //Length of the string
 int N = P.length();

 //Sample Output
 System.out.print(distinctSubString(str, K, N));
 }
}

