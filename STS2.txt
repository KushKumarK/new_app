// Java program to print all permutations of a string
// in sorted order.
import java.io.*;
import java.util.*;

class Solution {

// Calculating factorial of a number
static int factorial(int n) {
	int f = 1;
	for (int i = 1; i <= n; i++)
	f = f * i;
	return f;
}

// Method to print the array
static void print(char[] temp) {
	for (int i = 0; i < temp.length; i++)
	System.out.print(temp[i]);
	System.out.println();
}

// Method to find total number of permutations
static int calculateTotal(char[] temp, int n) {
	int f = factorial(n);

	// Building HashMap to store frequencies of
	// all characters.
	HashMap<Character, Integer> hm =
					new HashMap<Character, Integer>();
	for (int i = 0; i < temp.length; i++) {
	if (hm.containsKey(temp[i]))
		hm.put(temp[i], hm.get(temp[i]) + 1);
	else
		hm.put(temp[i], 1);
	}

	// Traversing hashmap and finding duplicate elements.
	for (Map.Entry e : hm.entrySet()) {
	Integer x = (Integer)e.getValue();
	if (x > 1) {
		int temp5 = factorial(x);
		f = f / temp5;
	}
	}
	return f;
}

static void nextPermutation(char[] temp) {

	// Start traversing from the end and
	// find position 'i-1' of the first character
	// which is greater than its successor.
	int i;
	for (i = temp.length - 1; i > 0; i--)
	if (temp[i] > temp[i - 1])
		break;

	// Finding smallest character after 'i-1' and
	// greater than temp[i-1]
	int min = i;
	int j, x = temp[i - 1];
	for (j = i + 1; j < temp.length; j++)
	if ((temp[j] < temp[min]) && (temp[j] > x))
		min = j;

	// Swapping the above found characters.
	char temp_to_swap;
	temp_to_swap = temp[i - 1];
	temp[i - 1] = temp[min];
	temp[min] = temp_to_swap;

	// Sort all digits from position next to 'i-1'
	// to end of the string.
	Arrays.sort(temp, i, temp.length);

	// Print the String
	print(temp);
}

static void printAllPermutations(String s) {

	// Sorting String
	char temp[] = s.toCharArray();
	Arrays.sort(temp);

	// Print first permutation
	print(temp);

	// Finding the total permutations
	int total = calculateTotal(temp, temp.length);
	for (int i = 1; i < total; i++)
	nextPermutation(temp);
}

// Driver Code
public static void main(String[] args) {
	String s = "AAB";
	printAllPermutations(s);
}
}
// A simple java program to calculate
// Euler's Totient Function
import java.io.*;

class GFG {

	// Function to return GCD of a and b
	static int gcd(int a, int b)
	{
		if (a == 0)
			return b;
		return gcd(b % a, a);
	}

	// A simple method to evaluate
	// Euler Totient Function
	static int phi(int n)
	{
		int result = 1;
		for (int i = 2; i < n; i++)
			if (gcd(i, n) == 1)
				result++;
		return result;
	}

	// Driver code
	public static void main(String[] args)
	{
		int n;

		for (n = 1; n <= 10; n++)
			System.out.println("phi(" + n + ") = " + phi(n));
	}
}

// Java program to calculate Euler's Totient
// Function using Euler's product formula
import java.io.*;

class GFG {
	static int phi(int n)
	{
		// Initialize result as n
		float result = n;

		// Consider all prime factors of n and for
		// every prime factor p, multiply result
		// with (1 - 1/p)
		for (int p = 2; p * p <= n; ++p) {
			// Check if p is a prime factor.
			if (n % p == 0) {
				// If yes, then update n and result
				while (n % p == 0)
					n /= p;
				result *= (1.0 - (1.0 / (float)p));
			}
		}

		// If n has a prime factor greater than sqrt(n)
		// (There can be at-most one such prime factor)
		if (n > 1)
			result -= result / n;
//Since in the set {1,2,....,n-1}, all numbers are relatively prime with n
//if n is a prime number

		return (int)result;
	}

	// Driver program to test above function
	public static void main(String args[])
	{
		int n;
		for (n = 1; n <= 10; n++)
			System.out.println("phi(" + n + ") = " + phi(n));
	}
}

// Java program to print all primes smaller than or equal to
// n using Sieve of Eratosthenes Simple

class SieveOfEratosthenes {
	void sieveOfEratosthenes(int n)
	{
		// Create a boolean array "prime[0..n]" and
		// initialize all entries it as true. A value in
		// prime[i] will finally be false if i is Not a
		// prime, else true.
		boolean prime[] = new boolean[n + 1];
		for (int i = 0; i <= n; i++)
			prime[i] = true;

		for (int p = 2; p * p <= n; p++) {
			// If prime[p] is not changed, then it is a
			// prime
			if (prime[p] == true) {
				// Update all multiples of p greater than or
				// equal to the square of it numbers which
				// are multiple of p and are less than p^2
				// are already been marked.
				for (int i = p * p; i <= n; i += p)
					prime[i] = false;
			}
		}

		// Print all prime numbers
		for (int i = 2; i <= n; i++) {
			if (prime[i] == true)
				System.out.print(i + " ");
		}
	}

	// Driver Code
	public static void main(String args[])
	{
		int n = 30;
		System.out.print("Following are the prime numbers ");
		System.out.println("smaller than or equal to " + n);
		SieveOfEratosthenes g = new SieveOfEratosthenes();
		g.sieveOfEratosthenes(n);
	}
}

// Java program to print all primes smaller than
// n using segmented sieve


import java.util.Vector;
import static java.lang.Math.sqrt;
import static java.lang.Math.floor;

class Test
{
	static void simpleSieve(int limit, Vector<Integer> prime)
	{
		for (int i = 0; i < mark.length; i++)
			mark[i] = true;
	
		for (int p=2; p*p<limit; p++)
		{
			if (mark[p] == true)
			{
				// Update all multiples of p
				for (int i=p*p; i<limit; i+=p)
					mark[i] = false;
			}
		}
		// Print all prime numbers and store them in prime
		for (int p=2; p<limit; p++)
		{
			if (mark[p] == true)
			{
				prime.add(p);
				System.out.print(p + " ");
			}
		}
	}
	
	// Prints all prime numbers smaller than 'n' segmented sieve
	static void segmentedSieve(int n)
	{
		int limit = (int) (floor(sqrt(n))+1);
		Vector<Integer> prime = new Vector<>();
		simpleSieve(limit, prime);
		int low = limit;
		int high = 2*limit;
		while (low < n)
		{
			if (high >= n)
				high = n;
			boolean mark[] = new boolean[limit+1];
			for (int i = 0; i < mark.length; i++)
				mark[i] = true;
			for (int i = 0; i < prime.size(); i++)
			{
				int loLim = (int) (floor(low/prime.get(i)) * prime.get(i));
				if (loLim < low)
					loLim += prime.get(i);
				for (int j=loLim; j<high; j+=prime.get(i))
					mark[j-low] = false;
			}
	
			// Numbers which are not marked as false are prime
			for (int i = low; i<high; i++)
				if (mark[i - low] == true)
					System.out.print(i + " ");
	
			// Update low and high for next segment
			low = low + limit;
			high = high + limit;
		}
	}
	
	// Driver method
	public static void main(String args[])
	{
		int n = 100;
		System.out.println("Primes smaller than " + n + ":");
		segmentedSieve(n);
	}
}

// Java program to print all
// Strobogrammatic number of length n
import java.util.*;

class GFG {

// definition function
static ArrayList<String> numdef(int n, int length)
{
	ArrayList<String> result = new ArrayList<String>();
	if (n == 0)
	return result;
	if (n == 1) {
	result.add("1");
	result.add("0");
	result.add("8");
	return result;
	}

	ArrayList<String> middles = numdef(n - 2, length);

	for (String middle : middles) {
	if (n != length)
		result.add("0" + middle + "0");

	result.add("8" + middle + "8");
	result.add("1" + middle + "1");
	result.add("9" + middle + "6");
	result.add("6" + middle + "9");
	}
	return result;
}

// strobogrammatic function
static ArrayList<String> strobogrammatic_num(int n)
{
	ArrayList<String> result = numdef(n, n);
	return result;
}

// Driver Code
public static void main(String[] args)
{
	// Print all Strobogrammatic
	// number for n = 3
	for (String num : (strobogrammatic_num(3)))
	System.out.print(num + " ");
}
}

// Java program for Alice Apple Tree
import java.io.*;
class GFG {

// Function to minimum no. of apples
static int minApples(int M,int K,int N,int S,int W,int E)
{

	// If we get all required apple
	// from South
	if(M <= S * K)
		return M;

	// If we required trees at
	// East and West
	else if(M <= S * K + E + W)
		return S * K + (M-S * K) * K;

	// If we doesn't have enough
	// red apples
	else
		return -1;
}

// Driver code
public static void main(String[] args)
{
	// No. of red apple for gift
	int M = 10;

	// No. of red apple in each tree
	int K = 15;

	// No. of tree in North
	int N = 0;

	// No. of tree in South
	int S = 1;

	// No. of tree in West
	int W = 0;

	// No. of tree in East
	int E = 0;

	// Function Call
	int ans = minApples(M,K,N,S,W,E);
	System.out.println(ans);
}
}

