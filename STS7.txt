// Program for finding out majority element in an array 

class MajorityElement {
	/* Function to print Majority Element */
	void printMajority(int a[], int size)
	{
		/* Find the candidate for Majority*/
		int cand = findCandidate(a, size);

		/* Print the candidate if it is Majority*/
		if (isMajority(a, size, cand))
			System.out.println(" " + cand + " ");
		else
			System.out.println("No Majority Element");
	}

	/* Function to find the candidate for Majority */
	int findCandidate(int a[], int size)
	{
		int maj_index = 0, count = 1;
		int i;
		for (i = 1; i < size; i++) {
			if (a[maj_index] == a[i])
				count++;
			else
				count--;
			if (count == 0) {
				maj_index = i;
				count = 1;
			}
		}
		return a[maj_index];
	}

	/* Function to check if the candidate occurs more
	than n/2 times */
	boolean isMajority(int a[], int size, int cand)
	{
		int i, count = 0;
		for (i = 0; i < size; i++) {
			if (a[i] == cand)
				count++;
		}
		if (count > size / 2)
			return true;
		else
			return false;
	}

	/* Driver code */
	public static void main(String[] args)
	{
		MajorityElement majorelement
			= new MajorityElement();
		int a[] = new int[] { 1, 3, 3, 1, 2 };
		
		// Function call
		int size = a.length;
		majorelement.printMajority(a, size);
	}
}


// Java program to find maximum product subarray
import java.io.*;

class GFG {
	/* Returns the product of max product subarray.*/
	static int maxSubarrayProduct(int arr[])
	{
		// Initializing result
		int result = arr[0];
		int n = arr.length;

		for (int i = 0; i < n; i++) {
			int mul = arr[i];
			// traversing in current subarray
			for (int j = i + 1; j < n; j++) {
				// updating result every time to keep an eye
				// over the maximum product
				result = Math.max(result, mul);
				mul *= arr[j];
			}
			// updating the result for (n-1)th index.
			result = Math.max(result, mul);
		}
		return result;
	}

	// Driver Code
	public static void main(String[] args)
	{
		int arr[] = { 1, -2, -3, 0, 7, -8, -2 };
		System.out.println("Maximum Sub array product is "
						+ maxSubarrayProduct(arr));
	}
}

// java program to find maximum
// equilibrium sum.
import java.io.*;

class GFG {
	
	// Function to find maximum
	// equilibrium sum.
	static int findMaxSum(int []arr, int n)
	{
		int res = Integer.MIN_VALUE;
		
		for (int i = 0; i < n; i++)
		{
			int prefix_sum = arr[i];
			
			for (int j = 0; j < i; j++)
				prefix_sum += arr[j];
		
			int suffix_sum = arr[i];
			
			for (int j = n - 1; j > i; j--)
				suffix_sum += arr[j];
		
			if (prefix_sum == suffix_sum)
				res = Math.max(res, prefix_sum);
		}
		
		return res;
	}
	
	// Driver Code
	public static void main (String[] args)
	{
		int arr[] = {-2, 5, 3, 1, 2, 6, -4, 2 };
		int n = arr.length;
		System.out.println(findMaxSum(arr, n));
	}
}

// Java program to find maximum
// sum of hour glass in matrix
import java.io.*;

class GFG {
	
static int R = 5;
static int C = 5;

// Returns maximum sum of
// hour glass in ar[][]
static int findMaxSum(int [][]mat)
{
	if (R < 3 || C < 3){
		System.out.println("Not possible");
		System.exit(0);
	}

	// Here loop runs (R-2)*(C-2)
	// times considering different
	// top left cells of hour glasses.
	int max_sum = Integer.MIN_VALUE;
	for (int i = 0; i < R - 2; i++)
	{
		for (int j = 0; j < C - 2; j++)
		{
			// Considering mat[i][j] as top
			// left cell of hour glass.
			int sum = (mat[i][j] + mat[i][j + 1] +
					mat[i][j + 2]) + (mat[i + 1][j + 1]) +
					(mat[i + 2][j] + mat[i + 2][j + 1] +
					mat[i + 2][j + 2]);

			// If previous sum is less than
			// current sum then update
			// new sum in max_sum
			max_sum = Math.max(max_sum, sum);
		}
	}
	return max_sum;
}

	// Driver code
	static public void main (String[] args)
	{
		int [][]mat = {{1, 2, 3, 0, 0},
					{0, 0, 0, 0, 0},
					{2, 1, 4, 0, 0},
					{0, 0, 0, 0, 0},
					{1, 1, 0, 1, 0}};
		int res = findMaxSum(mat);
		System.out.println("Maximum sum of hour glass = "+ res);
	}
	
}

// Java program to swap two
// nibbles in a byte

class GFG {
	
static int swapNibbles(int x)
{
	return ((x & 0x0F) << 4 | (x & 0xF0) >> 4);
}

// Driver code
public static void main(String arg[])
{
	int x = 100;
	System.out.print(swapNibbles(x));
}
}

// Java code to implement booth's algorithm
class GFG
{

	// function to perform adding in the accumulator
	static void add(int ac[], int x[], int qrn)
	{
		int i, c = 0;

		for (i = 0; i < qrn; i++)
		{

			// updating accumulator with A = A + BR
			ac[i] = ac[i] + x[i] + c;

			if (ac[i] > 1)
			{
				ac[i] = ac[i] % 2;
				c = 1;
			}
			else
			{
				c = 0;
			}
		}
	}
	// function to find the number's complement
	static void complement(int a[], int n)
	{
		int i;
		int[] x = new int[8];
		x[0] = 1;

		for (i = 0; i < n; i++)
		{
			a[i] = (a[i] + 1) % 2;
		}
		add(a, x, n);
	}
	// function ro perform right shift
	static void rightShift(int ac[], int qr[],int qn, int qrn)
	{
		int temp, i;
		temp = ac[0];
		qn = qr[0];

		System.out.print("\t\trightShift\t");

		for (i = 0; i < qrn - 1; i++)
		{
			ac[i] = ac[i + 1];
			qr[i] = qr[i + 1];
		}
		qr[qrn - 1] = temp;
	}
	// function to display operations
	static void display(int ac[], int qr[], int qrn)
	{
		int i;

		// accumulator content
		for (i = qrn - 1; i >= 0; i--)
		{
			System.out.print(ac[i]);
		}
		System.out.print("\t");

		// multiplier content
		for (i = qrn - 1; i >= 0; i--)
		{
			System.out.print(qr[i]);
		}
	}
	// Function to implement booth's algo
	static void boothAlgorithm(int br[], int qr[], int mt[],int qrn, int sc)
	{

		int qn = 0;
		int[] ac = new int[10];
		int temp = 0;
		System.out.print("qn\tq[n+1]\t\tBR\t\tAC\tQR\t\tsc\n");
		System.out.print("\t\t\tinitial\t\t");
		display(ac, qr, qrn);
		System.out.print("\t\t" + sc + "\n");
		while (sc != 0)
		{
			System.out.print(qr[0] + "\t" + qn);
			// SECOND CONDITION
			if ((qn + qr[0]) == 1)
			{
				if (temp == 0)
				{

					// subtract BR from accumulator
					add(ac, mt, qrn);
					System.out.print("\t\tA = A - BR\t");

					for (int i = qrn - 1; i >= 0; i--)
					{
						System.out.print(ac[i]);
					}
					temp = 1;
				}				
				// THIRD CONDITION
				else if (temp == 1)
				{
					// add BR to accumulator
					add(ac, br, qrn);
					System.out.print("\t\tA = A + BR\t");

					for (int i = qrn - 1; i >= 0; i--)
					{
						System.out.print(ac[i]);
					}
					temp = 0;
				}
				System.out.print("\n\t");
				rightShift(ac, qr, qn, qrn);
			}			
			// FIRST CONDITION
			else if (qn - qr[0] == 0)
			{
				rightShift(ac, qr, qn, qrn);
			}
			display(ac, qr, qrn);
			System.out.print("\t");
			// decrement counter
			sc--;
			System.out.print("\t" + sc + "\n");
		}
	}
	static void reverse(int a[])
	{
		int i, k, n = a.length;
		int t;
		for (i = 0; i < n / 2; i++)
		{
			t = a[i];
			a[i] = a[n - i - 1];
			a[n - i - 1] = t;
		}
	}
	// Driver code
	public static void main(String[] args)
	{
		int[] mt = new int[10];
		int sc;
		int brn, qrn;
		// Number of multiplicand bit
		brn = 4;
		// multiplicand
		int br[] = {0, 1, 1, 0};
		// copy multiplier to temp array mt[]
		for (int i = brn - 1; i >= 0; i--)
		{
			mt[i] = br[i];
		}
		reverse(br);
		complement(mt, brn);
		// No. of multiplier bit
		qrn = 4;
		// sequence counter
		sc = qrn;
		// multiplier
		int qr[] = {1, 0, 1, 0};
		reverse(qr);
		boothAlgorithm(br, qr, mt, qrn, sc);
		System.out.print("\n" + "Result = ");
		for (int i = qrn - 1; i >= 0; i--)
		{
			System.out.print(qr[i]);
		}
	}
}
