// Activity Selection Problem
import java.io.*;
import java.lang.*;
import java.util.*;

class ActivitySelection {
	// Prints a maximum set of activities that can be done
	// by a single person, one at a time.
	public static void printMaxActivities(int s[], int f[],
										int n)
	{
		int i, j;

		System.out.println(
			"Following activities are selected");

		// The first activity always gets selected
		i = 0;
		System.out.print(i + " ");

		// Consider rest of the activities
		for (j = 1; j < n; j++) {
			// If this activity has start time greater than
			// or equal to the finish time of previously
			// selected activity, then select it
			if (s[j] >= f[i]) {
				System.out.print(j + " ");
				i = j;
			}
		}
	}

	// Driver code
	public static void main(String[] args)
	{
		int s[] = { 1, 3, 0, 5, 8, 5 };
		int f[] = { 2, 4, 6, 7, 9, 9 };
		int n = s.length;

		// Function call
		printMaxActivities(s, f, n);
	}
}


// Combinations
import java.util.*;
public class Main
{
    static Vector<Vector<Integer>> ans = new Vector<Vector<Integer>>();
    static Vector<Integer> tmp = new Vector<Integer>();

    static void makeCombiUtil(int n, int left, int k)
    {

        // Pushing this vector to a vector of vector
        if (k == 0) {
            ans.add(tmp);
            for(int i = 0; i < tmp.size(); i++)
            {
                System.out.print(tmp.get(i) + " ");
            }
            System.out.println();
            return;
        }

        // i iterates from left to n. First time
        // left will be 1
        for (int i = left; i <= n; ++i)
        {
            tmp.add(i);
            makeCombiUtil(n, i + 1, k - 1);

            // Popping out last inserted element
            // from the vector
            tmp.remove(tmp.size() - 1);
        }
    }

    // Prints all combinations of size k of numbers
    // from 1 to n.
    static Vector<Vector<Integer>> makeCombi(int n, int k)
    {
        makeCombiUtil(n, 1, k);
        return ans;
    }

    public static void main(String[] args)
    {

        // given number
        int n = 5;
        int k = 3;
        ans = makeCombi(n, k);
    }
}

// Graph Coloring
// A Java program to implement greedy algorithm for graph coloring
import java.io.*;
import java.util.*;
import java.util.LinkedList;

// This class represents an undirected graph using adjacency list
class Graph
{
	private int V; // No. of vertices
	private LinkedList<Integer> adj[]; //Adjacency List

	//Constructor
	Graph(int v)
	{
		V = v;
		adj = new LinkedList[v];
		for (int i=0; i<v; ++i)
			adj[i] = new LinkedList();
	}

	//Function to add an edge into the graph
	void addEdge(int v,int w)
	{
		adj[v].add(w);
		adj[w].add(v); //Graph is undirected
	}

	// Assigns colors (starting from 0) to all vertices and
	// prints the assignment of colors
	void greedyColoring()
	{
		int result[] = new int[V];

		// Initialize all vertices as unassigned
		Arrays.fill(result, -1);

		// Assign the first color to first vertex
		result[0] = 0;

		// A temporary array to store the available colors. False
		// value of available[cr] would mean that the color cr is
		// assigned to one of its adjacent vertices
		boolean available[] = new boolean[V];

		// Initially, all colors are available
		Arrays.fill(available, true);

		// Assign colors to remaining V-1 vertices
		for (int u = 1; u < V; u++)
		{
			// Process all adjacent vertices and flag their colors
			// as unavailable
			Iterator<Integer> it = adj[u].iterator() ;
			while (it.hasNext())
			{
				int i = it.next();
				if (result[i] != -1)
					available[result[i]] = false;
			}

			// Find the first available color
			int cr;
			for (cr = 0; cr < V; cr++){
				if (available[cr])
					break;
			}

			result[u] = cr; // Assign the found color

			// Reset the values back to true for the next iteration
			Arrays.fill(available, true);
		}

		// print the result
		for (int u = 0; u < V; u++)
			System.out.println("Vertex " + u + " ---> Color "
								+ result[u]);
	}

	// Driver method
	public static void main(String args[])
	{
		Graph g1 = new Graph(5);
		g1.addEdge(0, 1);
		g1.addEdge(0, 2);
		g1.addEdge(1, 2);
		g1.addEdge(1, 3);
		g1.addEdge(2, 3);
		g1.addEdge(3, 4);
		System.out.println("Coloring of graph 1");
		g1.greedyColoring();

		System.out.println();
		Graph g2 = new Graph(5);
		g2.addEdge(0, 1);
		g2.addEdge(0, 2);
		g2.addEdge(1, 2);
		g2.addEdge(1, 4);
		g2.addEdge(2, 4);
		g2.addEdge(4, 3);
		System.out.println("Coloring of graph 2 ");
		g2.greedyColoring();
	}
}

// Hamiltonian Cycle
class HamiltonianCycle
{
	final int V = 5;
	int path[];

	/* A utility function to check if the vertex v can be
	added at index 'pos'in the Hamiltonian Cycle
	constructed so far (stored in 'path[]') */
	boolean isSafe(int v, int graph[][], int path[], int pos)
	{
		/* Check if this vertex is an adjacent vertex of
		the previously added vertex. */
		if (graph[path[pos - 1]][v] == 0)
			return false;

		/* Check if the vertex has already been included.
		This step can be optimized by creating an array
		of size V */
		for (int i = 0; i < pos; i++)
			if (path[i] == v)
				return false;

		return true;
	}

	/* A recursive utility function to solve hamiltonian
	cycle problem */
	boolean hamCycleUtil(int graph[][], int path[], int pos)
	{
		/* base case: If all vertices are included in
		Hamiltonian Cycle */
		if (pos == V)
		{
			// And if there is an edge from the last included
			// vertex to the first vertex
			if (graph[path[pos - 1]][path[0]] == 1)
				return true;
			else
				return false;
		}

		// Try different vertices as a next candidate in
		// Hamiltonian Cycle. We don't try for 0 as we
		// included 0 as starting point in hamCycle()
		for (int v = 1; v < V; v++)
		{
			/* Check if this vertex can be added to Hamiltonian
			Cycle */
			if (isSafe(v, graph, path, pos))
			{
				path[pos] = v;

				/* recur to construct rest of the path */
				if (hamCycleUtil(graph, path, pos + 1) == true)
					return true;

				/* If adding vertex v doesn't lead to a solution,
				then remove it */
				path[pos] = -1;
			}
		}

		/* If no vertex can be added to Hamiltonian Cycle
		constructed so far, then return false */
		return false;
	}

	/* This function solves the Hamiltonian Cycle problem using
	Backtracking. It mainly uses hamCycleUtil() to solve the
	problem. It returns false if there is no Hamiltonian Cycle
	possible, otherwise return true and prints the path.
	Please note that there may be more than one solutions,
	this function prints one of the feasible solutions. */
	int hamCycle(int graph[][])
	{
		path = new int[V];
		for (int i = 0; i < V; i++)
			path[i] = -1;

		/* Let us put vertex 0 as the first vertex in the path.
		If there is a Hamiltonian Cycle, then the path can be
		started from any point of the cycle as the graph is
		undirected */
		path[0] = 0;
		if (hamCycleUtil(graph, path, 1) == false)
		{
			System.out.println("\nSolution does not exist");
			return 0;
		}

		printSolution(path);
		return 1;
	}

	/* A utility function to print solution */
	void printSolution(int path[])
	{
		System.out.println("Solution Exists: Following" +
						" is one Hamiltonian Cycle");
		for (int i = 0; i < V; i++)
			System.out.print(" " + path[i] + " ");

		// Let us print the first vertex again to show the
		// complete cycle
		System.out.println(" " + path[0] + " ");
	}

	// driver program to test above function
	public static void main(String args[])
	{
		HamiltonianCycle hamiltonian =
								new HamiltonianCycle();
		/* Let us create the following graph
		(0)--(1)--(2)
			| / \ |
			| / \ |
			| /	 \ |
		(3)-------(4) */
		int graph1[][] = {{0, 1, 0, 1, 0},
			{1, 0, 1, 1, 1},
			{0, 1, 0, 0, 1},
			{1, 1, 0, 0, 1},
			{0, 1, 1, 1, 0},
		};

		// Print the solution
		hamiltonian.hamCycle(graph1);

		/* Let us create the following graph
		(0)--(1)--(2)
			| / \ |
			| / \ |
			| /	 \ |
		(3)	 (4) */
		int graph2[][] = {{0, 1, 0, 1, 0},
			{1, 0, 1, 1, 1},
			{0, 1, 0, 0, 1},
			{1, 1, 0, 0, 0},
			{0, 1, 1, 0, 0},
		};

		// Print the solution
		hamiltonian.hamCycle(graph2);
	}
}

// Josephus Problem
import java.util.*;

class GFG{


static void Josh(List<Integer> person, int k, int index)
{

	// Base case , when only one person is left
	if (person.size() == 1) {
	System.out.println(person.get(0));
	return;
	}

	// find the index of first person which will die
	index = ((index + k) % person.size());

	// remove the first person which is going to be killed
	person.remove(index);

	// recursive call for n-1 persons
	Josh(person, k, index);
}

// Driver code
public static void main(String [] args)
{
	int n = 14; // specific n and k values for original
	// josephus problem
	int k = 2;
	k--; // (k-1)th person will be killed
	int index
	= 0; // The index where the person which will die

	List<Integer> person = new ArrayList<>();

	// fill the person vector
	for (int i = 1; i <= n; i++) {
	person.add(i);
	}

	Josh(person, k, index);
}
}

// Kruskal's algorithm

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class KruskalsMST {

	// Defines edge structure
	static class Edge {
		int src, dest, weight;

		public Edge(int src, int dest, int weight)
		{
			this.src = src;
			this.dest = dest;
			this.weight = weight;
		}
	}

	// Defines subset element structure
	static class Subset {
		int parent, rank;

		public Subset(int parent, int rank)
		{
			this.parent = parent;
			this.rank = rank;
		}
	}

	// Starting point of program execution
	public static void main(String[] args)
	{
		int V = 4;
		List<Edge> graphEdges = new ArrayList<Edge>(
			List.of(new Edge(0, 1, 10), new Edge(0, 2, 6),
					new Edge(0, 3, 5), new Edge(1, 3, 15),
					new Edge(2, 3, 4)));

		// Sort the edges in non-decreasing order
		// (increasing with repetition allowed)
		graphEdges.sort(new Comparator<Edge>() {
			@Override public int compare(Edge o1, Edge o2)
			{
				return o1.weight - o2.weight;
			}
		});

		kruskals(V, graphEdges);
	}

	// Function to find the MST
	private static void kruskals(int V, List<Edge> edges)
	{
		int j = 0;
		int noOfEdges = 0;

		// Allocate memory for creating V subsets
		Subset subsets[] = new Subset[V];

		// Allocate memory for results
		Edge results[] = new Edge[V];

		// Create V subsets with single elements
		for (int i = 0; i < V; i++) {
			subsets[i] = new Subset(i, 0);
		}

		// Number of edges to be taken is equal to V-1
		while (noOfEdges < V - 1) {

			// Pick the smallest edge. And increment
			// the index for next iteration
			Edge nextEdge = edges.get(j);
			int x = findRoot(subsets, nextEdge.src);
			int y = findRoot(subsets, nextEdge.dest);

			// If including this edge doesn't cause cycle,
			// include it in result and increment the index
			// of result for next edge
			if (x != y) {
				results[noOfEdges] = nextEdge;
				union(subsets, x, y);
				noOfEdges++;
			}

			j++;
		}

		// Print the contents of result[] to display the
		// built MST
		System.out.println(
			"Following are the edges of the constructed MST:");
		int minCost = 0;
		for (int i = 0; i < noOfEdges; i++) {
			System.out.println(results[i].src + " -- "
							+ results[i].dest + " == "
							+ results[i].weight);
			minCost += results[i].weight;
		}
		System.out.println("Total cost of MST: " + minCost);
	}

	// Function to unite two disjoint sets
	private static void union(Subset[] subsets, int x,
							int y)
	{
		int rootX = findRoot(subsets, x);
		int rootY = findRoot(subsets, y);

		if (subsets[rootY].rank < subsets[rootX].rank) {
			subsets[rootY].parent = rootX;
		}
		else if (subsets[rootX].rank
				< subsets[rootY].rank) {
			subsets[rootX].parent = rootY;
		}
		else {
			subsets[rootY].parent = rootX;
			subsets[rootX].rank++;
		}
	}

	// Function to find parent of a set
	private static int findRoot(Subset[] subsets, int i)
	{
		if (subsets[i].parent == i)
			return subsets[i].parent;

		subsets[i].parent
			= findRoot(subsets, subsets[i].parent);
		return subsets[i].parent;
	}
}

// Manacher's Algorithm longest palindromic substring
import java.util.*;

class GFG
{
	static void findLongestPalindromicString(String text)
	{
		int N = text.length();
		if (N == 0)
			return;
		N = 2 * N + 1; // Position count
		int[] L = new int[N + 1]; // LPS Length Array
		L[0] = 0;
		L[1] = 1;
		int C = 1; // centerPosition
		int R = 2; // centerRightPosition
		int i = 0; // currentRightPosition
		int iMirror; // currentLeftPosition
		int maxLPSLength = 0;
		int maxLPSCenterPosition = 0;
		int start = -1;
		int end = -1;
		int diff = -1;

		// Uncomment it to print LPS Length array
		// printf("%d %d ", L[0], L[1]);
		for (i = 2; i < N; i++)
		{

			// get currentLeftPosition iMirror
			// for currentRightPosition i
			iMirror = 2 * C - i;
			L[i] = 0;
			diff = R - i;

			// If currentRightPosition i is within
			// centerRightPosition R
			if (diff > 0)
				L[i] = Math.min(L[iMirror], diff);

			// Attempt to expand palindrome centered at
			// currentRightPosition i. Here for odd positions,
			// we compare characters and if match then
			// increment LPS Length by ONE. If even position,
			// we just increment LPS by ONE without
			// any character comparison
			while (((i + L[i]) + 1 < N && (i - L[i]) > 0) &&
							(((i + L[i] + 1) % 2 == 0) ||
						(text.charAt((i + L[i] + 1) / 2) ==
						text.charAt((i - L[i] - 1) / 2))))
			{
				L[i]++;
			}

			if (L[i] > maxLPSLength) // Track maxLPSLength
			{
				maxLPSLength = L[i];
				maxLPSCenterPosition = i;
			}

			// If palindrome centered at currentRightPosition i
			// expand beyond centerRightPosition R,
			// adjust centerPosition C based on expanded palindrome.
			if (i + L[i] > R)
			{
				C = i;
				R = i + L[i];
			}

			// Uncomment it to print LPS Length array
			// printf("%d ", L[i]);
		}

		start = (maxLPSCenterPosition - maxLPSLength) / 2;
		end = start + maxLPSLength - 1;
		System.out.printf("LPS of string is %s : ", text);
		for (i = start; i <= end; i++)
			System.out.print(text.charAt(i));
		System.out.println();
	}

	// Driver Code
	public static void main(String[] args)
	{
		String text = "babcbabcbaccba";
		findLongestPalindromicString(text);

		text = "abaaba";
		findLongestPalindromicString(text);

		text = "abababa";
		findLongestPalindromicString(text);

		text = "abcbabcbabcba";
		findLongestPalindromicString(text);

		text = "forgeeksskeegfor";
		findLongestPalindromicString(text);

		text = "caba";
		findLongestPalindromicString(text);

		text = "abacdfgdcaba";
		findLongestPalindromicString(text);

		text = "abacdfgdcabba";
		findLongestPalindromicString(text);

		text = "abacdedcaba";
		findLongestPalindromicString(text);
	}
}
// Maneuvering Problem
// A Java program to count all possible paths
// from top left to bottom right

class GFG {

	// Returns count of possible paths to reach
	// cell at row number m and column number n
	// from the topmost leftmost cell (cell at 1, 1)
	static int numberOfPaths(int m, int n)
	{
		// If either given row number is first or
		// given column number is first
		if (m == 1 || n == 1)
			return 1;

		// If diagonal movements are allowed then
		// the last addition is required.
		return numberOfPaths(m - 1, n)
			+ numberOfPaths(m, n - 1);
		// + numberOfPaths(m-1, n-1);
	}

	// Driver code
	public static void main(String args[])
	{
		System.out.println(numberOfPaths(3, 3));
	}
}

// Maze Solving

public class RatMaze {
	final int N = 4;

	/* A utility function to print solution matrix
	sol[N][N] */
	void printSolution(int sol[][])
	{
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++)
				System.out.print(" " + sol[i][j] + " ");
			System.out.println();
		}
	}

	/* A utility function to check if x, y is valid
		index for N*N maze */
	boolean isSafe(int maze[][], int x, int y)
	{
		// if (x, y outside maze) return false
		return (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1);
	}

	/* This function solves the Maze problem using
	Backtracking. It mainly uses solveMazeUtil()
	to solve the problem. It returns false if no
	path is possible, otherwise return true and
	prints the path in the form of 1s. Please note
	that there may be more than one solutions, this
	function prints one of the feasible solutions.*/
	boolean solveMaze(int maze[][])
	{
		int sol[][] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };

		if (solveMazeUtil(maze, 0, 0, sol) == false) {
			System.out.print("Solution doesn't exist");
			return false;
		}

		printSolution(sol);
		return true;
	}

	/* A recursive utility function to solve Maze
	problem */
	boolean solveMazeUtil(int maze[][], int x, int y,
						int sol[][])
	{
		// if (x, y is goal) return true
		if (x == N - 1 && y == N - 1) {
			sol[x][y] = 1;
			return true;
		}

		// Check if maze[x][y] is valid
		if (isSafe(maze, x, y) == true) {
			// mark x, y as part of solution path
			sol[x][y] = 1;

			/* Move forward in x direction */
			if (solveMazeUtil(maze, x + 1, y, sol))
				return true;

			/* If moving in x direction doesn't give
			solution then Move down in y direction */
			if (solveMazeUtil(maze, x, y + 1, sol))
				return true;

			/* If none of the above movements works then
			BACKTRACK: unmark x, y as part of solution
			path */
			sol[x][y] = 0;
			return false;
		}

		return false;
	}

	public static void main(String args[])
	{
		RatMaze rat = new RatMaze();
		int maze[][] = { { 1, 0, 0, 0 },
						{ 1, 1, 0, 1 },
						{ 0, 1, 0, 0 },
						{ 1, 1, 1, 1 } };
		rat.solveMaze(maze);
	}
}

// Move Hyphen to Beginning
// Java program to bring all spaces in front of
// string using swapping technique
class GFG
{

	// Function to find spaces and move to beginning
	static void moveSpaceInFront(char str[])
	{
		// Traverse from end and swap spaces
		int i = str.length-1;
		for (int j = i; j >= 0; j--)
			if (str[j] != ' ')
			{
				char c = str[i];
				str[i] = str[j];
				str[j] = c;
				i--;
			}
	}

	// Driver code
	public static void main(String[] args)
	{
		char str[] = "Hey there, it's GeeksforGeeks".toCharArray();
		moveSpaceInFront(str);
		System.out.println(String.valueOf(str));
	}
}

// N-Queens Problem

public class NQueenProblem {
	final int N = 4;

	// A utility function to print solution
	void printSolution(int board[][])
	{
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (board[i][j] == 1)
					System.out.print("Q ");
				else
					System.out.print(". ");
			}
			System.out.println();
		}
	}

	// A utility function to check if a queen can
	// be placed on board[row][col]. Note that this
	// function is called when "col" queens are already
	// placeed in columns from 0 to col -1. So we need
	// to check only left side for attacking queens
	boolean isSafe(int board[][], int row, int col)
	{
		int i, j;

		// Check this row on left side
		for (i = 0; i < col; i++)
			if (board[row][i] == 1)
				return false;

		// Check upper diagonal on left side
		for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
			if (board[i][j] == 1)
				return false;

		// Check lower diagonal on left side
		for (i = row, j = col; j >= 0 && i < N; i++, j--)
			if (board[i][j] == 1)
				return false;

		return true;
	}

	// A recursive utility function to solve N
	// Queen problem
	boolean solveNQUtil(int board[][], int col)
	{
		// Base case: If all queens are placed
		// then return true
		if (col >= N)
			return true;

		// Consider this column and try placing
		// this queen in all rows one by one
		for (int i = 0; i < N; i++) {

			// Check if the queen can be placed on
			// board[i][col]
			if (isSafe(board, i, col)) {

				// Place this queen in board[i][col]
				board[i][col] = 1;

				// Recur to place rest of the queens
				if (solveNQUtil(board, col + 1) == true)
					return true;

				// If placing queen in board[i][col]
				// doesn't lead to a solution then
				// remove queen from board[i][col]
				board[i][col] = 0; // BACKTRACK
			}
		}

		// If the queen can not be placed in any row in
		// this column col, then return false
		return false;
	}

	// This function solves the N Queen problem using
	// Backtracking. It mainly uses solveNQUtil () to
	// solve the problem. It returns false if queens
	// cannot be placed, otherwise, return true and
	// prints placement of queens in the form of 1s.
	// Please note that there may be more than one
	// solutions, this function prints one of the
	// feasible solutions.
	boolean solveNQ()
	{
		int board[][] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };

		if (solveNQUtil(board, 0) == false) {
			System.out.print("Solution does not exist");
			return false;
		}

		printSolution(board);
		return true;
	}

	// Driver program to test above function
	public static void main(String args[])
	{
		NQueenProblem Queen = new NQueenProblem();
		Queen.solveNQ();
	}
}

// Natural Sort Order Algorithm
// Java program to demonstrate
// Comparator.naturalOrder() method

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class GFG {
	public static void main(String... args)
	{

		List<Integer> values
			= Arrays.asList(212, 324,
							435, 566,
							133, 100, 121);

		// naturalOrder is a static method
		values.sort(Comparator.naturalOrder());

		// print sorted number based on natural order
		System.out.println(values);
	}
}

// Quick Select
import java.util.Arrays;

class GFG {

	// partition function similar to quick sort
	// Considers last element as pivot and adds
	// elements with less value to the left and
	// high value to the right and also changes
	// the pivot position to its respective position
	// in the final array.
	public static int partition(int[] arr, int low,
								int high)
	{
		int pivot = arr[high], pivotloc = low;
		for (int i = low; i <= high; i++) {
			// inserting elements of less value
			// to the left of the pivot location
			if (arr[i] < pivot) {
				int temp = arr[i];
				arr[i] = arr[pivotloc];
				arr[pivotloc] = temp;
				pivotloc++;
			}
		}

		// swapping pivot to the final pivot location
		int temp = arr[high];
		arr[high] = arr[pivotloc];
		arr[pivotloc] = temp;

		return pivotloc;
	}

	// finds the kth position (of the sorted array)
	// in a given unsorted array i.e this function
	// can be used to find both kth largest and
	// kth smallest element in the array.
	// ASSUMPTION: all elements in arr[] are distinct
	public static int kthSmallest(int[] arr, int low,
								int high, int k)
	{
		// find the partition
		int partition = partition(arr, low, high);

		// if partition value is equal to the kth position,
		// return value at k.
		if (partition == k - 1)
			return arr[partition];

		// if partition value is less than kth position,
		// search right side of the array.
		else if (partition < k - 1)
			return kthSmallest(arr, partition + 1, high, k);

		// if partition value is more than kth position,
		// search left side of the array.
		else
			return kthSmallest(arr, low, partition - 1, k);
	}

	// Driver Code
	public static void main(String[] args)
	{
		int[] array = new int[] { 10, 4, 5, 8, 6, 11, 26 };
		int[] arraycopy
			= new int[] { 10, 4, 5, 8, 6, 11, 26 };

		int kPosition = 3;
		int length = array.length;

		if (kPosition > length) {
			System.out.println("Index out of bound");
		}
		else {
			// find kth smallest value
			System.out.println(
				"K-th smallest element in array : "
				+ kthSmallest(arraycopy, 0, length - 1,
							kPosition));
		}
	}
}


//Print all permutations of a string in sorted order.
import java.io.*;
import java.util.*;

class Solution {

// Calculating factorial of a number
static int factorial(int n) {
	int f = 1;
	for (int i = 1; i <= n; i++)
	f = f * i;
	return f;
}

// Method to print the array
static void print(char[] temp) {
	for (int i = 0; i < temp.length; i++)
	System.out.print(temp[i]);
	System.out.println();
}

// Method to find total number of permutations
static int calculateTotal(char[] temp, int n) {
	int f = factorial(n);

	// Building HashMap to store frequencies of
	// all characters.
	HashMap<Character, Integer> hm =
					new HashMap<Character, Integer>();
	for (int i = 0; i < temp.length; i++) {
	if (hm.containsKey(temp[i]))
		hm.put(temp[i], hm.get(temp[i]) + 1);
	else
		hm.put(temp[i], 1);
	}

	// Traversing hashmap and finding duplicate elements.
	for (Map.Entry e : hm.entrySet()) {
	Integer x = (Integer)e.getValue();
	if (x > 1) {
		int temp5 = factorial(x);
		f = f / temp5;
	}
	}
	return f;
}

static void nextPermutation(char[] temp) {

	// Start traversing from the end and
	// find position 'i-1' of the first character
	// which is greater than its successor.
	int i;
	for (i = temp.length - 1; i > 0; i--)
	if (temp[i] > temp[i - 1])
		break;

	// Finding smallest character after 'i-1' and
	// greater than temp[i-1]
	int min = i;
	int j, x = temp[i - 1];
	for (j = i + 1; j < temp.length; j++)
	if ((temp[j] < temp[min]) && (temp[j] > x))
		min = j;

	// Swapping the above found characters.
	char temp_to_swap;
	temp_to_swap = temp[i - 1];
	temp[i - 1] = temp[min];
	temp[min] = temp_to_swap;

	// Sort all digits from position next to 'i-1'
	// to end of the string.
	Arrays.sort(temp, i, temp.length);

	// Print the String
	print(temp);
}

static void printAllPermutations(String s) {

	// Sorting String
	char temp[] = s.toCharArray();
	Arrays.sort(temp);

	// Print first permutation
	print(temp);

	// Finding the total permutations
	int total = calculateTotal(temp, temp.length);
	for (int i = 1; i < total; i++)
	nextPermutation(temp);
}

// Driver Code
public static void main(String[] args) {
	String s = "AAB";
	printAllPermutations(s);
}
}


// Weighted Substring
import java.util.*;

class GFG{

// Function to find the count of
// all the subStrings with weight
// of characters atmost K
static int distinctSubString(String P, String Q,
					int K, int N)
{

	// Hashmap to store all subStrings
	HashSet<String> S = new HashSet<String>();

	// Iterate over all subStrings
	for (int i = 0; i < N; ++i) {

		// Maintain the sum of all characters
		// encountered so far
		int sum = 0;

		// Maintain the subString till the
		// current position
		String s = "";

		for (int j = i; j < N; ++j) {

			// Get the position of the
			// character in String Q
			int pos = P.charAt(j) - 'a';

			// Add weight to current sum
			sum += Q.charAt(pos) - '0';

			// Add current character to subString
			s += P.charAt(j);

			// If sum of characters is <=K
			// then insert into the set
			if (sum <= K) {
				S.add(s);
			}

			else {
				break;
			}
		}
	}

	// Finding the size of the set
	return S.size();
}

// Driver code
public static void main(String[] args)
{
	String P = "abcde";
	String Q = "12345678912345678912345678";
	int K = 5;
	int N = P.length();

	System.out.print(distinctSubString(P, Q, K, N));
}
}
